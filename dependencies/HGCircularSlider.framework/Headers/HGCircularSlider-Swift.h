// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIColor;
@class UIImage;
@class NSCoder;
@class UITouch;
@class UIEvent;

/// A visual control used to select a single value from a continuous range of values.
/// Can also be used like a circular progress view
/// CircularSlider uses the target-action mechanism to report changes made during the course of editing:
/// ValueChanged, EditingDidBegin and EditingDidEnd
SWIFT_CLASS("_TtC16HGCircularSlider14CircularSlider")
@interface CircularSlider : UIControl
/// The color shown for the selected portion of the slider disk. (between start and end values)
/// The default value is a transparent color.
@property (nonatomic, strong) UIColor * _Nonnull diskFillColor;
/// The color shown for the unselected portion of the slider disk. (outside start and end values)
/// The default value of this property is the black color with alpha = 0.3.
@property (nonatomic, strong) UIColor * _Nonnull diskColor;
/// The color shown for the selected track portion. (between start and end values)
/// The default value of this property is the tint color.
@property (nonatomic, strong) UIColor * _Nonnull trackFillColor;
/// The color shown for the unselected track portion. (outside start and end values)
/// The default value of this property is the white color.
@property (nonatomic, strong) UIColor * _Nonnull trackColor;
/// The width of the circular line
/// The default value of this property is 5.0.
@property (nonatomic) CGFloat lineWidth;
/// The width of the unselected track portion of the slider
/// The default value of this property is 5.0.
@property (nonatomic) CGFloat backtrackLineWidth;
/// The shadow offset of the slider
/// The default value of this property is .zero.
@property (nonatomic) CGPoint trackShadowOffset;
/// The color of the shadow offset of the slider
/// The default value of this property is .gray.
@property (nonatomic, strong) UIColor * _Nonnull trackShadowColor;
/// The width of the thumb stroke line
/// The default value of this property is 4.0.
@property (nonatomic) CGFloat thumbLineWidth;
/// The radius of the thumb
/// The default value of this property is 13.0.
@property (nonatomic) CGFloat thumbRadius;
/// The color used to tint the thumb
/// Ignored if the endThumbImage != nil
/// The default value of this property is the groupTableViewBackgroundColor.
@property (nonatomic, strong) UIColor * _Nonnull endThumbTintColor;
/// The stroke highlighted color of the end thumb
/// The default value of this property is blue
@property (nonatomic, strong) UIColor * _Nonnull endThumbStrokeHighlightedColor;
/// The color used to tint the stroke of the end thumb
/// Ignored if the endThumbImage != nil
/// The default value of this property is red.
@property (nonatomic, strong) UIColor * _Nonnull endThumbStrokeColor;
/// The image of the end thumb
/// Clears any custom color you may have provided for the end thumb.
/// The default value of this property is nil
@property (nonatomic, strong) UIImage * _Nullable endThumbImage;
/// Fixed number of rounds - how many circles has user to do to reach max value (like apple bedtime clock - which have 2)
/// the default value if this property is 1
@property (nonatomic) NSInteger numberOfRounds;
/// The minimum value of the receiver.
/// If you change the value of this property, and the end value of the receiver is below the new minimum, the end point value is adjusted to match the new minimum value automatically.
/// The default value of this property is 0.0.
@property (nonatomic) CGFloat minimumValue;
/// The maximum value of the receiver.
/// If you change the value of this property, and the end value of the receiver is above the new maximum, the end value is adjusted to match the new maximum value automatically.
/// The default value of this property is 1.0.
@property (nonatomic) CGFloat maximumValue;
/// The value of the endThumb (changed when the user change the position of the end thumb)
/// If you try to set a value that is above the maximum value, the property automatically resets to the maximum value.
/// And if you try to set a value that is below the minimum value, the property automatically resets  to the minimum value.
/// The default value of this property is 0.5
@property (nonatomic) CGFloat endPointValue;
/// See superclass documentation
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// See superclass documentation
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// See superclass documentation
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// See superclass documentation
- (void)drawRect:(CGRect)rect;
/// See superclass documentation
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// See superclass documentation
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// See superclass documentation
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
@end


@interface CircularSlider (SWIFT_EXTENSION(HGCircularSlider))
@end


/// A visual control used to select a range of values (between start point and the end point) from a continuous range of values.
/// RangeCircularSlider use the target-action mechanism to report changes made during the course of editing:
/// ValueChanged, EditingDidBegin and EditingDidEnd
SWIFT_CLASS("_TtC16HGCircularSlider19RangeCircularSlider")
@interface RangeCircularSlider : CircularSlider
/// The color used to tint start thumb
/// Ignored if the startThumbImage != nil
/// The default value of this property is the groupTableViewBackgroundColor.
@property (nonatomic, strong) UIColor * _Nonnull startThumbTintColor;
/// The color used to tint the stroke of the start thumb
/// Ignored if the startThumbImage != nil
/// The default value of this property is the green color.
@property (nonatomic, strong) UIColor * _Nonnull startThumbStrokeColor;
/// The stroke highlighted color of start thumb
/// The default value of this property is blue color
@property (nonatomic, strong) UIColor * _Nonnull startThumbStrokeHighlightedColor;
/// The image of the end thumb
/// Clears any custom color you may have provided for end thumb.
/// The default value of this property is nil
@property (nonatomic, strong) UIImage * _Nullable startThumbImage;
/// The minimum value of the receiver.
/// If you change the value of this property, and the start value of the receiver is below the new minimum, the start value is adjusted to match the new minimum value automatically.
/// The end value is also adjusted to match (startPointValue + distance) automatically if the distance is different to -1 (SeeAlso: startPointValue, distance)
/// The default value of this property is 0.0.
@property (nonatomic) CGFloat minimumValue;
/// The maximum value of the receiver.
/// If you change the value of this property, and the end value of the receiver is above the new maximum, the end value is adjusted to match the new maximum value automatically.
/// The start value is also adjusted to match (endPointValue - distance) automatically  if the distance is different to -1 (see endPointValue, distance)
/// The default value of this property is 1.0.
@property (nonatomic) CGFloat maximumValue;
/// <ul>
///   <li>
///     The fixed distance between the start value and the end value
///   </li>
///   <li>
///   </li>
///   <li>
///     If you change the value of this property, the end value is adjusted to match (startPointValue + distance)
///   </li>
///   <li>
///     If the end value is above the maximum value, the end value is adjusted to match the maximum value and the start value is adjusted to match (endPointValue - distance)
///   </li>
///   <li>
///     To disable distance use -1 (by default)
///   </li>
///   <li>
///   </li>
///   <li>
///     The default value of this property is -1
///   </li>
/// </ul>
@property (nonatomic) CGFloat distance;
/// The value in the start thumb.
/// If you try to set a value that is below the minimum value, the minimum value is set instead.
/// If you try to set a value that is above the (endPointValue - distance), the (endPointValue - distance) is set instead.
/// The default value of this property is 0.0.
@property (nonatomic) CGFloat startPointValue;
/// The value in the end thumb.
/// If you try to set a value that is above the maximum value, the maximum value is set instead.
/// If you try to set a value that is below the (startPointValue + distance), the (startPointValue + distance) is set instead.
/// The default value of this property is 0.5
@property (nonatomic) CGFloat endPointValue;
/// See superclass documentation
- (void)drawRect:(CGRect)rect;
/// See superclass documentation
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// See superclass documentation
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A visual control used to select a fixed range of values from a continuous range of values.
/// MidPointCircularSlider use the target-action mechanism to report changes made during the course of editing:
/// ValueChanged, EditingDidBegin and EditingDidEnd
SWIFT_CLASS("_TtC16HGCircularSlider22MidPointCircularSlider")
@interface MidPointCircularSlider : RangeCircularSlider
/// The color used to tint thumb
/// Ignored if the midThumbImage != nil
/// The default value of this property is the groupTableViewBackgroundColor.
@property (nonatomic, strong) UIColor * _Nonnull midThumbTintColor;
/// The stroke highlighted color of end thumb
/// The default value of this property is blue color
@property (nonatomic, strong) UIColor * _Nonnull midThumbStrokeHighlightedColor;
/// The color used to tint the stroke of the mid thumb
/// Ignored if the midThumbImage != nil
/// The default value of this property is the red color.
@property (nonatomic, strong) UIColor * _Nonnull midThumbStrokeColor;
/// The image of the mid thumb
/// Clears any custom color you may have provided for mid thumb.
/// The default value of this property is nil
@property (nonatomic, strong) UIImage * _Nullable midThumbImage;
/// The fixed range distance
/// The value of this property should be >= 0
/// The default value of this property is 0.2
@property (nonatomic) CGFloat distance;
/// The value of the mid point (between the start and end points)
@property (nonatomic) CGFloat midPointValue;
/// See superclass documentation
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// See superclass documentation
- (void)drawRect:(CGRect)rect;
/// See superclass documentation
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// See superclass documentation
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end


#pragma clang diagnostic pop
